generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String               @id @default(uuid())
  email         String               @unique
  passwordHash  String?
  name          String?
  role          Role                 @default(USER)
  avatarUrl     String?
  oauthProvider String?
  oauthId       String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  addresses     Address[]
  orders        Order[]
  resetTokens   ResetPasswordToken[]
}

model Address {
  id         String   @id @default(uuid())
  userId     String
  order      Order[]
  label      String?
  fullName   String
  phone      String
  street     String
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String          @id @default(uuid())
  userId          String
  items           OrderItem[]
  addressId       String
  status          OrderStatus     @default(PENDING)
  fulfillment     FulfillmentType @default(SHIPPING)
  totalAmount     Float
  shippingAddr    String?
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus   @default(PENDING)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [id])
  address         Address?        @relation(fields: [addressId], references: [id])
}

model OrderItem {
  id              String          @id @default(uuid())
  orderId         String
  productId       String
  quantity        Int
  price           Float
  order           Order           @relation(fields: [orderId], references: [id])
  product         Product         @relation(fields: [productId], references: [id])
}

model ResetPasswordToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id              String         @id @unique @default(uuid())
  title           String
  description     String
  shortDesc       String?
  price           Float
  discountedPrice Float?
  productCode     String?        @unique(map: "Product_pdouctCode_key")
  stockQuantity   Int            @default(0)
  categoryId      String?
  brand           String?
  tags            String?
  status          ProductStatus  @default(DRAFT)
  isActive        Boolean        @default(true)
  weight          Float?
  dimensions      String?
  createdBy       String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publishedAt     DateTime?
  featuredAt      DateTime?
  metaTitle       String?
  metaDescription String?
  images          ProductImage[]
  orderItem       OrderItem[]
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  url       String
  altText   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Role {
  USER
  ADMIN
}

enum ProductStatus {
  DRAFT
  NORMAL
  FEATURE
}

enum PaymentMethod {
  COD
  CARD
  UPI
  NETBANKING
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum FulfillmentType {
  SHIPPING
  PICKUP
}
